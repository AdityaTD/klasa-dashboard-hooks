{"meta":{"generator":"0.0.1","format":19,"date":1528913645816},"custom":{"Getting Started":{"name":"Getting Started","files":{"GettingStarted":{"name":"Getting Started","type":"md","content":"## Getting Started\n\nplaceholder","path":"guides/Getting Started/GettingStarted.md"}}},"Piece Basics":{"name":"Piece Basics","files":{"CreatingRoutes":{"name":"Creating Routes","type":"md","content":"Routes are http request/response handlers for the route specfied. New routes are created in the `./routes/` folder.\n\n```javascript\nconst { Route } = require('klasa-dashboard-hooks');\n\nmodule.exports = class extends Route {\n\n\tconstructor(...args) {\n\t\tsuper(...args, {\n\t\t\troute: '/',\n\t\t\tauthenticated: false\n\t\t});\n\t}\n\n\tget(request, response) {\n\t\t// This is where you place the code you want to run for get requests\n\t}\n\n\tpost(request, response) {\n\t\t// This is where you place the code you want to run for post requests\n\t}\n\n\tpatch(request, response) {\n\t\t// This is where you place the code you want to run for patch requests\n\t}\n\n\tdelete(request, response) {\n\t\t// This is where you place the code you want to run for delete requests\n\t}\n\n\t// ect\n\n};\n```\n\nThe http methods in {@link Route} takes 2 parameters:\n\n| Name             | Type                             | Description                |\n| ---------------- | -------------------------------- | -------------------------- |\n| **request**      | {@link KlasaIncomingMessage}     | The incomming request      |\n| **response**     | {@link external:ServerResponse}  | The outgoing response      |\n\n```javascript\nconst { Route } = require('klasa-dashboard-hooks');\n\nmodule.exports = class extends Route {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { route: 'users' });\n\t}\n\n\tget(request, response) {\n\t\treturn response.end(JSON.stringify(this.client.users.keyArray()));\n\t}\n\n};\n```\n\nHow does the route work?\n\n1. A get request is made to your api at the `/users` route like: api.yourdomain.com/users\n2. After all {@link Middleware} have run, the code in the get method is run.\n3. You end the response with strinified json of the `this.client.users.keyArray()`\n\nStatic routes are all and good, but you are more likely going to need some dynamic routes too:\n\n```javascript\nconst { Route } = require('klasa-dashboard-hooks');\n\nmodule.exports = class extends Route {\n\n\tconstructor(...args) {\n\t\tsuper(...args, { route: 'users/:userID' });\n\t}\n\n\tget(request, response) {\n\t\tconst { userID } = request.params;\n\t\tconst user = this.client.users.get(userID);\n\t\tif (!user) response.end('{}');\n\t\treturn response.end(JSON.stringify(user));\n\t}\n\n};\n```\n\n>Note the colin in front of the userID portion of the route\n\nHow does the new route work?\n\n1. A get request is made to your api at the `/users/:userID` route like: api.yourdomain.com/users/167383252271628289\n2. After all {@link Middleware} have run, the code in the get method is run.\n3. You access the userID variable from the `request.params`\n4. After trying to get the user from your cache, you either respond with `'{}'` or the stringified user.\n\n# Further reading\n\n- {@tutorial CreatingMiddlewares}\n","path":"guides/Piece Basics/CreatingRoutes.md"},"CreatingMiddlewares":{"name":"Creating Middlewares","type":"md","content":"Middlewares are http middleware handlers that run on all routes. New middlewares are created in the `./middlewares/` folder.\n\n```javascript\nconst { Middleware } = require('klasa-dashboard-hooks');\n\nmodule.exports = class extends Middleware {\n\n\tasync run(request, response, route) {\n\t\t// This is where you place the code you want to run on all routes\n\t}\n\n};\n```\n\nThe run method in {@link Middleware} takes 3 parameters:\n\n| Name             | Type                             | Description                |\n| ---------------- | -------------------------------- | -------------------------- |\n| **request**      | {@link KlasaIncomingMessage}     | The incomming request      |\n| **response**     | {@link external:ServerResponse}  | The outgoing response      |\n| **route**        | {@link Route}                    | The route being run        |\n\n```javascript\nconst { Middleware } = require('klasa-dashboard-hooks');\n\nmodule.exports = class extends Middleware {\n\n\trun(request) {\n\t\tresponse.setHeader('Content-Type', 'application/json');\n\t}\n\n};\n```\n\nHow does the middleware work?\n\n1. A request is made to your api\n2. Since we are making a json api, we want to set the header in a way that clients know we are responding with json\n3. The method is implicently resolved, and the next {@link Middleware} is run, or finally the {@link Route}.\n\n>Note: the {@link Middleware#run()} may be async/return a promise as well.\n\n# Further reading\n\n- {@tutorial CreatingRoutes}\n","path":"guides/Piece Basics/CreatingMiddlewares.md"}}}},"classes":[{"name":"DashboardClient","description":"The client for handling everything. See {@tutorial GettingStarted} for more information how to get started using this class.","extends":["external:KlasaClient"],"construct":{"name":"DashboardClient","description":"Constructs the klasa-dashboard-hooks client","params":[{"name":"config","description":"The config to pass to the new client","type":[[["DashboardClientOptions"]]]}]},"props":[{"name":"server","description":"The http server handler for the api","type":[[["Server"]]],"meta":{"line":43,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"routes","description":"The cache where routes are stored","type":[[["RouteStore"]]],"meta":{"line":51,"file":"Client.js","path":"src/lib"},"since":"0.0.1"},{"name":"middlewares","description":"The cache where middlewares are stored","type":[[["MiddlewareStore"]]],"meta":{"line":59,"file":"Client.js","path":"src/lib"},"since":"0.0.1"}],"meta":{"line":13,"file":"Client.js","path":"src/lib"}},{"name":"Server","description":"The http server for klasa-dashboard-hooks","construct":{"name":"Server","params":[{"name":"client","description":"The Klasa client","type":[[["DashboardClient"]]]}]},"props":[{"name":"client","description":"The Client that manages this Server instance","type":[[["DashboardClient"]]],"meta":{"line":40,"file":"Server.js","path":"src/lib/http"},"since":"0.0.1"},{"name":"server","description":"The http.Server instance that manages the HTTP requests","type":[[["external:HTTPServer"]]],"meta":{"line":47,"file":"Server.js","path":"src/lib/http"},"since":"0.0.1"},{"name":"onNoMatch","description":"The onError function called when a url does not match","type":[[["function"]]],"meta":{"line":56,"file":"Server.js","path":"src/lib/http"},"since":"0.0.1"}],"methods":[{"name":"listen","description":"Starts the server listening to a port","params":[{"name":"port","description":"The port to run the server on","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"Server.js","path":"src/lib/http"}},{"name":"handler","description":"The handler for incoming requests","params":[{"name":"request","description":"The request","type":[[["external:IncomingMessage"]]]},{"name":"response","description":"The response","type":[[["external:ServerResponse"]]]}],"async":true,"meta":{"line":76,"file":"Server.js","path":"src/lib/http"}},{"name":"onError","description":"The handler for errors","params":[{"name":"error","description":"The error","type":[[["Error"]],[["ErrorLike"]]]},{"name":"request","description":"The request","type":[[["KlasaIncomingMessage"]]]},{"name":"response","description":"The response","type":[[["external:ServerResponse"]]]}],"meta":{"line":102,"file":"Server.js","path":"src/lib/http"}}],"meta":{"line":10,"file":"Server.js","path":"src/lib/http"}},{"name":"Middleware","description":"Base class for all Klasa Middleware. See {@tutorial CreatingMiddlewares} for more information how to use this class\nto build custom events.","extends":["external:Piece"],"methods":[{"name":"run","description":"The run method to be overwritten in actual event handlers","abstract":true,"params":[{"name":"request","description":"The http request","type":[[["KlasaIncomingMessage"]]]},{"name":"response","description":"The http response","type":[[["external:ServerResponse"]]]},{"name":"route","description":"The route being run","nullable":true,"type":[[["Route"]]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":20,"file":"Middleware.js","path":"src/lib/structures"},"since":"0.0.1"}],"meta":{"line":9,"file":"Middleware.js","path":"src/lib/structures"}},{"name":"MiddlewareStore","description":"Stores all the middlewares that are part of Klasa-dashboard-hooks","extends":["external:Store"],"construct":{"name":"MiddlewareStore","params":[{"name":"client","description":"The Klasa client","type":[[["DashboardClient"]]]}]},"props":[{"name":"coreDir","description":"The directory of pieces in Klasa relative to where its installed.","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"MiddlewareStore.js","path":"src/lib/structures"},"since":"0.0.1"}],"methods":[{"name":"run","description":"Runs all the middleware.","params":[{"name":"request","description":"The http request","type":[[["KlasaIncomingMessage"]]]},{"name":"response","description":"The http response","type":[[["external:ServerResponse"]]]},{"name":"route","description":"The route being run","nullable":true,"type":[[["Route"]]]}],"returns":[[["Promise","<"],["void",">"]]],"async":true,"meta":{"line":38,"file":"MiddlewareStore.js","path":"src/lib/structures"},"since":"0.0.1"}],"meta":{"line":10,"file":"MiddlewareStore.js","path":"src/lib/structures"}},{"name":"Route","description":"Base class for all Klasa Routes. See {@tutorial CreatingRoutes} for more information how to use this class\nto build custom events.","extends":["external:Piece"],"construct":{"name":"Route","params":[{"name":"client","description":"The Klasa client","type":[[["DashboardClient"]]]},{"name":"store","description":"The Route Store","type":[[["RouteStore"]]]},{"name":"file","description":"The path from the pieces folder to the middleware file","type":[[["string"]]]},{"name":"core","description":"If the piece is in the core directory or not","type":[[["boolean"]]]},{"name":"options","description":"Optional Route settings","optional":true,"default":"{}","type":[[["RouteOptions"]]]}]},"props":[{"name":"route","description":"Stored bound run method, so it can be properly disabled and reloaded later","type":[[["string"]]],"meta":{"line":38,"file":"Route.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"authenticated","description":"If the route is authenticated","type":[[["string"]]],"meta":{"line":45,"file":"Route.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"parsed","description":"Stored parsed route","type":[[["ParsedRoute"]]],"meta":{"line":52,"file":"Route.js","path":"src/lib/structures"},"since":"0.0.1"}],"methods":[{"name":"matches","description":"If this route matches a provided url","params":[{"name":"split","description":"the url to check","type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"meta":{"line":60,"file":"Route.js","path":"src/lib/structures"}},{"name":"execute","description":"Extracts the params from a provided url","params":[{"name":"split","description":"the url","type":[[["Array","<"],["string",">"]]]}],"returns":[[["Object","<"],["string",", "],["*",">"]]],"meta":{"line":71,"file":"Route.js","path":"src/lib/structures"}}],"meta":{"line":11,"file":"Route.js","path":"src/lib/structures"}},{"name":"RouteStore","description":"Stores all the routes that are part of Klasa-dashboard-hooks","extends":["external:Store"],"construct":{"name":"RouteStore","params":[{"name":"client","description":"The Klasa client","type":[[["DashboardClient"]]]}]},"props":[{"name":"registry","description":"A lookup registry of Maps keyed on http method","type":[[["any"]]],"meta":{"line":26,"file":"RouteStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"coreDir","description":"The directory of pieces in Klasa relative to where its installed.","readonly":true,"type":[[["string"]]],"meta":{"line":37,"file":"RouteStore.js","path":"src/lib/structures"},"since":"0.0.1"}],"methods":[{"name":"findRoute","description":"Finds a route using the registry","params":[{"name":"method","description":"The http method","type":[[["string"]]]},{"name":"splitURL","description":"the url to find","type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Route"]]],"nullable":true},"meta":{"line":48,"file":"RouteStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"clear","description":"Clears the RouteStore","returns":[[["void"]]],"meta":{"line":58,"file":"RouteStore.js","path":"src/lib/structures"},"since":"0.0.1"},{"name":"set","description":"Adds a Route to this RouteStore","params":[{"name":"piece","description":"The route to add to this store","type":[[["Route"]]]}],"returns":[[["Route"]]],"meta":{"line":68,"file":"RouteStore.js","path":"src/lib/structures"}},{"name":"delete","description":"Deletes a Route from this RouteStore","params":[{"name":"name","description":"The Name of the Route or the Route","type":[[["Route"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":80,"file":"RouteStore.js","path":"src/lib/structures"}}],"meta":{"line":12,"file":"RouteStore.js","path":"src/lib/structures"}},{"name":"Util","description":"Utility function class\n<danger>This class cannot be initialized with new</danger>","methods":[{"name":"parsePart","description":"Parses a url part","scope":"static","params":[{"name":"val","description":"The string part to parse","type":[[["string"]]]}],"returns":[[["ParsedPart"]]],"meta":{"line":24,"file":"Util.js","path":"src/lib/util"}},{"name":"split","description":"Splits a url into it's parts","scope":"static","params":[{"name":"url","description":"The url to split","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":35,"file":"Util.js","path":"src/lib/util"}},{"name":"parse","description":"Splits and parses a url into it's parts","scope":"static","params":[{"name":"url","description":"The url to split and parse","type":[[["string"]]]}],"returns":[[["Array","<"],["ParsedPart",">"]]],"meta":{"line":46,"file":"Util.js","path":"src/lib/util"}}],"meta":{"line":7,"file":"Util.js","path":"src/lib/util"}}],"typedefs":[{"name":"DashboardClientOptions","type":[[["external:KlasaClientOptions"]]],"props":[{"name":"dashboardHooks","description":"The Klasa-Dashboard-Hooks specific options","optional":true,"type":[[["KlasaDashboardHooksOptions"]]]}],"meta":{"line":16,"file":"Client.js","path":"src/lib"}},{"name":"KlasaDashboardHooksOptions","type":[[["Object"]]],"props":[{"name":"apiPrefix","description":"The route prefix for the api","optional":true,"default":"\"api/\"","type":[[["string"]]]},{"name":"origin","description":"The cross origin setting","optional":true,"default":"\"*\"","type":[[["string"]]]},{"name":"port","description":"The port the api runs on","optional":true,"default":4000,"type":[[["number"]]]},{"name":"http2","description":"Whether the server should use http/2 or not","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"sslOptions","description":"The SSL options","optional":true,"type":[[["external:SecureContextOptions"]]]}],"meta":{"line":21,"file":"Client.js","path":"src/lib"}},{"name":"KlasaIncomingMessage","type":[[["external:IncomingMessage"]]],"props":[{"name":"originalUrl","description":"The original URL","type":[[["string"]]]},{"name":"path","description":"The entire path section of the URL, including the `host`, `port`... and before the `query`/`hash` components","type":[[["string"]]]},{"name":"search","description":"The entire query string portion of the URL including the leading ASCII question mark (`?`) character","type":[[["string"]]]},{"name":"query","description":"The collection of key and value pairs parsed from the query string portion","type":[[["Object","<"],["string",", "],["*",">"]]]}],"meta":{"line":12,"file":"Server.js","path":"src/lib/http"}},{"name":"ErrorLike","access":"private","type":[[["Object"]]],"props":[{"name":"code","optional":true,"type":[[["number"]]]},{"name":"status","optional":true,"type":[[["number"]]]},{"name":"statusCode","optional":true,"type":[[["number"]]]},{"name":"message","optional":true,"type":[[["string"]]]}],"meta":{"line":20,"file":"Server.js","path":"src/lib/http"}},{"name":"ParsedRoute","type":[[["Array","<"],["ParsedPart",">"]]],"meta":{"line":13,"file":"Route.js","path":"src/lib/structures"}},{"name":"RouteOptions","type":[[["external:PieceOptions"]]],"props":[{"name":"route","optional":true,"type":[[["string"]]]}],"meta":{"line":17,"file":"Route.js","path":"src/lib/structures"}},{"name":"ParsedPart","type":[[["Object"]]],"props":[{"name":"val","description":"The value of the url part","type":[[["string"]]]},{"name":"type","description":"The type of url part (0 for static, 1 for variable)","type":[[["number"]]]}],"meta":{"line":9,"file":"Util.js","path":"src/lib/util"}}],"externals":[{"name":"KlasaClient","see":["{@link https://klasa.js.org/#/docs/main/master/class/KlasaClient}"],"meta":{"line":17,"file":"index.js","path":"src"}},{"name":"Piece","see":["{@link https://klasa.js.org/#/docs/main/master/class/Piece}"],"meta":{"line":21,"file":"index.js","path":"src"}},{"name":"Store","see":["{@link https://klasa.js.org/#/docs/main/master/class/Store}"],"meta":{"line":25,"file":"index.js","path":"src"}},{"name":"KlasaClientOptions","see":["{@link https://klasa.js.org/#/docs/main/master/typedef/KlasaClientOptions}"],"meta":{"line":29,"file":"index.js","path":"src"}},{"name":"PieceOptions","see":["{@link https://klasa.js.org/#/docs/main/master/typedef/PieceOptions}"],"meta":{"line":33,"file":"index.js","path":"src"}},{"name":"HTTPServer","see":["{@link https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_server}"],"meta":{"line":37,"file":"index.js","path":"src"}},{"name":"SecureContextOptions","see":["{@link https://nodejs.org/dist/latest-v10.x/docs/api/tls.html#tls_tls_createsecurecontext_options}"],"meta":{"line":41,"file":"index.js","path":"src"}},{"name":"IncomingMessage","see":["{@link https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_incomingmessage}"],"meta":{"line":45,"file":"index.js","path":"src"}},{"name":"ServerResponse","see":["{@link https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_serverresponse}"],"meta":{"line":49,"file":"index.js","path":"src"}}]}